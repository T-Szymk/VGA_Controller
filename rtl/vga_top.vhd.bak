-------------------------------------------------------------------------------
-- Title      : VGA Controller Top
-- Project    : VGA Controller
--------------------------------------------------------------------------------
-- File       : vga_top.vhd
-- Author(s)  : Thomas Szymkowiak
-- Company    : TUNI
-- Created    : 2021-06-24
-- Design     : vga_top
-- Platform   : -
-- Standard   : VHDL'08
--------------------------------------------------------------------------------
-- Description: Top level design for vga controller
--
--------------------------------------------------------------------------------
-- Revisions:
-- Date        Version  Author  Description
-- 2021-06-24  1.0      TZS     Created
--------------------------------------------------------------------------------
LIBRARY IEEE;
USE IEEE.STD_LOGIC_1164.ALL;

ENTITY vga_top IS
  GENERIC (
            ref_clk_freq_g : INTEGER := 50_000_000;
            px_clk_freq_g  : INTEGER := 25_000_000;
            height_px_g    : INTEGER := 480;
            width_px_g     : INTEGER := 680
          );

  PORT (
         clk    : IN STD_LOGIC;
         rst_n  : IN STD_LOGIC;
         sw_in  : IN STD_LOGIC_VECTOR(3-1 DOWNTO 0); 
         
         sync_n_out  : OUT STD_LOGIC;
         blank_n_out : OUT STD_LOGIC;
         v_sync_out  : OUT STD_LOGIC;
         h_sync_out  : OUT STD_LOGIC;
         clk_px_out  : OUT STD_LOGIC;
         r_colr_out  : OUT STD_LOGIC_VECTOR(10-1 DOWNTO 0);
         g_colr_out  : OUT STD_LOGIC_VECTOR(10-1 DOWNTO 0);
         b_colr_out  : OUT STD_LOGIC_VECTOR(10-1 DOWNTO 0)
       );
END ENTITY vga_top;

--------------------------------------------------------------------------------

ARCHITECTURE structural of vga_top IS 

  COMPONENT vga_clk_div
    GENERIC (
              ref_clk_freq_g : INTEGER := 50_000_000;
              px_clk_freq_g  : INTEGER := 25_000_000
    );
    PORT    ( 
              clk        : IN STD_LOGIC;
              rst_n      : IN STD_LOGIC;

              clk_px_out : OUT STD_LOGIC
    );
  END COMPONENT;

  COMPONENT vga_sw_sync
    PORT (
           clk   : IN STD_LOGIC;
           rst_n : IN STD_LOGIC; 
           sw_in : IN STD_LOGIC;
           
           colr_out : OUT STD_LOGIC_VECTOR(10-1 DOWNTO 0)
         );
    END COMPONENT;

  COMPONENT vga_controller IS
    GENERIC (
            width_g         : INTEGER := 640;
            height_g        : INTEGER := 480;
            h_sync_px_g     : INTEGER := 95;
            h_b_porch_px_g  : INTEGER := 48;
            h_f_porch_px_g  : INTEGER := 15;
            v_sync_lns_g    : INTEGER := 2;
            v_b_porch_lns_g : INTEGER := 33;
            v_f_porch_lns_g : INTEGER := 10
    );
    PORT(
        clk   : IN STD_LOGIC;
        rst_n : IN STD_LOGIC;

        blank_n_out : OUT STD_LOGIC;
        v_sync_out  : OUT STD_LOGIC;
        h_sync_out  : OUT STD_LOGIC
    );
  END COMPONENT vga_controller;

  TYPE colr_arr_t IS ARRAY(3-1 DOWNTO 0) OF STD_LOGIC_VECTOR(10-1 DOWNTO 0);

  SIGNAL clk_px_out_s : STD_LOGIC;
  SIGNAL sw_out_s     : STD_LOGIC_VECTOR(3-1 DOWNTO 0);

  SIGNAL colr_arr_s : colr_arr_t;

BEGIN 

  i_vga_clk_div : vga_clk_div
    GENERIC MAP (
                  ref_clk_freq_g => ref_clk_freq_g, 
                  px_clk_freq_g  => px_clk_freq_g
    )
    PORT MAP    (
                  clk        => clk,
                  rst_n      => rst_n,
                  clk_px_out => clk_px_out_s
    );

  gen_sync : FOR idx IN (3-1) DOWNTO 0 GENERATE
  BEGIN
    i_sw_sync : vga_sw_sync
      PORT MAP (
                 clk      => clk_px_out_s,
                 rst_n    => rst_n,
                 sw_in    => sw_in(idx),
                 colr_out => colr_arr_s(idx)
      );
  END GENERATE gen_sync;

  i_vga_controller : vga_controller
    GENERIC MAP ( 
      width_g         => 640,
      height_g        => 480,
      h_sync_px_g     => 95,
      h_b_porch_px_g  => 48,
      h_f_porch_px_g  => 15,
      v_sync_lns_g    => 2,
      v_b_porch_lns_g => 33,
      v_f_porch_lns_g => 10
    )
    PORT MAP (
      clk => clk_px_out_s,
      rst_n => rst_n,
      blank_n_out => blank_n_out,
      v_sync_out  => v_sync_out,
      h_sync_out  => h_sync_out
    );

  sync_n_out <= '0'; -- no synch info needed on green signal so tied to zero
  clk_px_out <= clk_px_out_s;
  r_colr_out <= colr_arr_s(0);
  g_colr_out <= colr_arr_s(1);
  b_colr_out <= colr_arr_s(2);


END ARCHITECTURE structural;

--------------------------------------------------------------------------------